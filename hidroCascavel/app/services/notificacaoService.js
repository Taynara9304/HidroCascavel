// services/notificacaoService.js - CORRE√á√ÉO COMPLETA
import { db } from '../services/firebaseConfig';
import { 
  collection, 
  addDoc, 
  updateDoc, 
  doc, 
  getDocs, 
  query, 
  where, 
  Timestamp,
  writeBatch
} from 'firebase/firestore';

export class AnalistaNotifications {
  static async solicitarCadastroAnalise(user, dadosAnalise) {
    try {
      console.log('üì§ Criando solicita√ß√£o de an√°lise...');
      
      const dadosNotificacao = {
        tipo: 'solicitacao_cadastro_analise',
        userId: user.uid,
        dadosSolicitacao: {
          ...dadosAnalise,
          proprietarioId: dadosAnalise.proprietarioId || '',
        },
        status: 'pendente',
        dataCriacao: Timestamp.now(),
      };

      const docRef = await addDoc(collection(db, 'notifications'), dadosNotificacao);
      console.log('‚úÖ Solicita√ß√£o criada com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
      throw error;
    }
  }

  // ‚úÖ CORRE√á√ÉO: Verificar se j√° existe an√°lise para evitar duplica√ß√£o
  static async verificarAnaliseExistente(pocoId, dataAnalise, analistaId) {
    try {
      const q = query(
        collection(db, 'analysis'),
        where('pocoId', '==', pocoId),
        where('idAnalista', '==', analistaId),
        where('dataAnalise', '>=', this.getStartOfDay(dataAnalise)),
        where('dataAnalise', '<=', this.getEndOfDay(dataAnalise))
      );

      const querySnapshot = await getDocs(q);
      return !querySnapshot.empty;
    } catch (error) {
      console.error('Erro ao verificar an√°lise existente:', error);
      return false;
    }
  }

  static getStartOfDay(date) {
    const d = new Date(date);
    d.setHours(0, 0, 0, 0);
    return Timestamp.fromDate(d);
  }

  static getEndOfDay(date) {
    const d = new Date(date);
    d.setHours(23, 59, 59, 999);
    return Timestamp.fromDate(d);
  }

  static async salvarAnaliseAprovada(dadosSolicitacao) {
    try {
      console.log('üíæ Salvando an√°lise na cole√ß√£o analysis...');
      
      // ‚úÖ CORRE√á√ÉO: Verificar se an√°lise j√° existe
      const analiseExistente = await this.verificarAnaliseExistente(
        dadosSolicitacao.pocoId,
        dadosSolicitacao.dataAnalise,
        dadosSolicitacao.analistaId
      );

      if (analiseExistente) {
        throw new Error('J√° existe uma an√°lise para este po√ßo na data informada');
      }

      const analiseData = {
        // Informa√ß√µes b√°sicas
        pocoId: dadosSolicitacao.pocoId,
        pocoNome: dadosSolicitacao.pocoNome,
        localizacaoPoco: dadosSolicitacao.pocoLocalizacao,
        nomeProprietario: dadosSolicitacao.proprietario,
        idProprietario: dadosSolicitacao.proprietarioId,
        idAnalista: dadosSolicitacao.analistaId,
        nomeAnalista: dadosSolicitacao.analistaNome,
        
        // Datas
        dataAnalise: this.converterData(dadosSolicitacao.dataAnalise),
        dataCriacao: Timestamp.now(),
        
        // Resultado e status
        resultado: dadosSolicitacao.resultado,
        status: 'ativa',
        tipoCadastro: 'solicitacao_analista',
        criadoPor: dadosSolicitacao.analistaId,
        
        // Par√¢metros da an√°lise
        temperaturaAr: this.convertToNumber(dadosSolicitacao.temperaturaAr),
        temperaturaAmostra: this.convertToNumber(dadosSolicitacao.temperaturaAmostra),
        ph: this.convertToNumber(dadosSolicitacao.ph),
        alcalinidade: this.convertToNumber(dadosSolicitacao.alcalinidade),
        acidez: this.convertToNumber(dadosSolicitacao.acidez),
        cor: this.convertToNumber(dadosSolicitacao.cor),
        turbidez: this.convertToNumber(dadosSolicitacao.turbidez),
        condutividadeEletrica: this.convertToNumber(dadosSolicitacao.condutividadeEletrica),
        sdt: this.convertToNumber(dadosSolicitacao.sdt),
        sst: this.convertToNumber(dadosSolicitacao.sst),
        cloroTotal: this.convertToNumber(dadosSolicitacao.cloroTotal),
        cloroLivre: this.convertToNumber(dadosSolicitacao.cloroLivre),
        coliformesTotais: this.convertToNumber(dadosSolicitacao.coliformesTotais),
        ecoli: this.convertToNumber(dadosSolicitacao.ecoli)
      };

      console.log('üìù Dados formatados para analysis:', analiseData);
      
      const docRef = await addDoc(collection(db, 'analysis'), analiseData);
      console.log('‚úÖ An√°lise salva com ID:', docRef.id);
      
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao salvar an√°lise aprovada:', error);
      throw error;
    }
  }

  // ‚úÖ NOVO: M√©todo para criar notifica√ß√£o do analista de forma robusta
  static async criarNotificacaoAnalista(analistaId, tipo, dados) {
    try {
      console.log('üì® Criando notifica√ß√£o para analista:', analistaId);
      
      const notificacaoData = {
        tipo: tipo,
        userId: analistaId,
        status: 'nao_lida',
        dataCriacao: Timestamp.now(),
        titulo: dados.titulo,
        mensagem: dados.mensagem,
        dadosAnalise: dados.dadosAnalise || null
      };

      const docRef = await addDoc(collection(db, 'notifications_analista'), notificacaoData);
      console.log('‚úÖ Notifica√ß√£o criada para analista:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar notifica√ß√£o para analista:', error);
      // N√£o lan√ßar erro para n√£o quebrar o fluxo principal
      return null;
    }
  }

  static converterData(data) {
    try {
      if (!data) return Timestamp.now();
      
      if (data instanceof Timestamp) {
        return data;
      }
      
      if (data instanceof Date) {
        return Timestamp.fromDate(data);
      }
      
      const date = new Date(data);
      if (isNaN(date.getTime())) {
        console.warn('Data inv√°lida, usando data atual:', data);
        return Timestamp.now();
      }
      
      return Timestamp.fromDate(date);
    } catch (error) {
      console.error('Erro ao converter data, usando data atual:', error);
      return Timestamp.now();
    }
  }

  static convertToNumber(value) {
    if (value === '' || value === null || value === undefined) return '';
    const num = Number(value);
    return isNaN(num) ? value : num;
  }
}

export class AdminNotifications {
  static async getPendingNotifications() {
    try {
      const q = query(
        collection(db, 'notifications'), 
        where('status', '==', 'pendente')
      );
      const querySnapshot = await getDocs(q);
      
      const notifications = [];
      querySnapshot.forEach((doc) => {
        notifications.push({
          id: doc.id,
          ...doc.data()
        });
      });
      
      console.log('üì• Notifica√ß√µes pendentes:', notifications.length);
      return notifications;
    } catch (error) {
      console.error('‚ùå Erro ao buscar notifica√ß√µes:', error);
      throw error;
    }
  }

  // ‚úÖ CORRE√á√ÉO: M√©todo aceitar com transa√ß√£o e verifica√ß√µes
  static async aceitarSolicitacaoAnalise(notificationId, notificationData) {
    const batch = writeBatch(db);
    
    try {
      console.log('‚úÖ Iniciando aceita√ß√£o da solicita√ß√£o:', notificationId);
      
      if (!notificationData.dadosSolicitacao) {
        throw new Error('Dados da solicita√ß√£o n√£o encontrados');
      }
      
      const dadosSolicitacao = notificationData.dadosSolicitacao;
      
      // ‚úÖ VERIFICA√á√ÉO: Verificar se notifica√ß√£o j√° foi processada
      const notificationRef = doc(db, 'notifications', notificationId);
      const notificationDoc = await getDocs(query(
        collection(db, 'notifications'), 
        where('__name__', '==', notificationId),
        where('status', '==', 'pendente')
      ));

      if (notificationDoc.empty) {
        throw new Error('Notifica√ß√£o j√° foi processada ou n√£o existe');
      }

      // ‚úÖ PRIMEIRO: Salvar a an√°lise na cole√ß√£o analysis
      console.log('üíæ Salvando an√°lise...');
      const analysisId = await AnalistaNotifications.salvarAnaliseAprovada(dadosSolicitacao);
      
      // ‚úÖ SEGUNDO: Atualizar o status da notifica√ß√£o
      console.log('üìù Atualizando notifica√ß√£o...');
      batch.update(notificationRef, {
        status: 'aceita',
        dataResolucao: Timestamp.now(),
        resolvidoPor: 'admin',
        analysisId: analysisId
      });

      // ‚úÖ TERCEIRO: Criar notifica√ß√£o para o analista
      console.log('üì® Notificando analista...');
      await AnalistaNotifications.criarNotificacaoAnalista(
        dadosSolicitacao.analistaId,
        'analise_aprovada',
        {
          titulo: '‚úÖ An√°lise Aprovada!',
          mensagem: `Sua an√°lise para o po√ßo "${dadosSolicitacao.pocoNome}" foi aprovada e j√° est√° dispon√≠vel no sistema.`,
          dadosAnalise: {
            analysisId: analysisId,
            pocoNome: dadosSolicitacao.pocoNome,
            dataAnalise: dadosSolicitacao.dataAnalise,
            resultado: dadosSolicitacao.resultado
          }
        }
      );

      // ‚úÖ Executar batch
      await batch.commit();
      
      console.log('üéâ Processo completo: Notifica√ß√£o aceita, an√°lise salva e analista notificado!');
      
    } catch (error) {
      console.error('‚ùå Erro ao aceitar solicita√ß√£o:', error);
      
      // Reverter opera√ß√µes em caso de erro
      batch.delete(doc(db, 'notifications', notificationId));
      
      throw error;
    }
  }

  // ‚úÖ CORRE√á√ÉO: M√©todo rejeitar com transa√ß√£o
  static async rejeitarSolicitacaoAnalise(notificationId, notificationData) {
    const batch = writeBatch(db);
    
    try {
      console.log('‚ùå Iniciando rejei√ß√£o da solicita√ß√£o:', notificationId);
      
      const dadosSolicitacao = notificationData.dadosSolicitacao;
      const notificationRef = doc(db, 'notifications', notificationId);
      
      // ‚úÖ VERIFICA√á√ÉO: Verificar se notifica√ß√£o j√° foi processada
      const notificationDoc = await getDocs(query(
        collection(db, 'notifications'), 
        where('__name__', '==', notificationId),
        where('status', '==', 'pendente')
      ));

      if (notificationDoc.empty) {
        throw new Error('Notifica√ß√£o j√° foi processada ou n√£o existe');
      }

      // ‚úÖ PRIMEIRO: Atualizar o status da notifica√ß√£o
      batch.update(notificationRef, {
        status: 'rejeitada',
        dataResolucao: Timestamp.now(),
        resolvidoPor: 'admin',
        motivoRejeicao: 'Solicita√ß√£o rejeitada pelo administrador'
      });

      // ‚úÖ SEGUNDO: Criar notifica√ß√£o para o analista
      await AnalistaNotifications.criarNotificacaoAnalista(
        dadosSolicitacao.analistaId,
        'analise_rejeitada',
        {
          titulo: '‚ùå An√°lise Rejeitada',
          mensagem: `Sua an√°lise para o po√ßo "${dadosSolicitacao.pocoNome}" foi rejeitada pelo administrador. Entre em contato para mais informa√ß√µes.`,
          dadosAnalise: {
            pocoNome: dadosSolicitacao.pocoNome,
            dataAnalise: dadosSolicitacao.dataAnalise,
            resultado: dadosSolicitacao.resultado
          }
        }
      );

      // ‚úÖ Executar batch
      await batch.commit();
      
      console.log('‚úÖ Notifica√ß√£o rejeitada e analista notificado!');
      
    } catch (error) {
      console.error('‚ùå Erro ao rejeitar solicita√ß√£o:', error);
      throw error;
    }
  }
}