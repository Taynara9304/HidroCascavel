// hooks/useTabelaPocos.js - vers√£o com debug completo
import { useState, useEffect } from 'react';
import { 
  collection, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  doc, 
  onSnapshot, 
  orderBy, 
  query,
  serverTimestamp,
  GeoPoint 
} from 'firebase/firestore';
import { db } from '../services/firebaseConfig';

const useWells = () => {
  const [wells, setWells] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [sortField, setSortField] = useState('dataCadastro');
  const [sortDirection, setSortDirection] = useState('desc');

  console.log('üîÑ useWells: Hook inicializado');

  // Buscar po√ßos em tempo real
  useEffect(() => {
    console.log('üì° useWells: Configurando listener do Firebase...');
    setLoading(true);
    setError(null);
    
    try {
      const wellsCollection = collection(db, 'wells');
      console.log('üì° useWells: Cole√ß√£o referenciada:', wellsCollection);
      
      const q = query(wellsCollection, orderBy(sortField, sortDirection === 'asc' ? 'asc' : 'desc'));
      
      const unsubscribe = onSnapshot(q, 
        (snapshot) => {
          console.log('üì° useWells: Snapshot recebido -', snapshot.docs.length, 'documentos');
          
          const wellsData = snapshot.docs.map(doc => {
            const data = doc.data();
            console.log('üì° useWells: Documento', doc.id, '=', data);
            return {
              id: doc.id,
              ...data
            };
          });
          
          setWells(wellsData);
          setLoading(false);
          console.log('‚úÖ useWells: Estado atualizado com', wellsData.length, 'po√ßos');
        },
        (error) => {
          console.error('‚ùå useWells: Erro no listener:', error);
          console.error('‚ùå useWells: C√≥digo do erro:', error.code);
          console.error('‚ùå useWells: Mensagem:', error.message);
          setError('Erro ao carregar po√ßos: ' + error.message);
          setLoading(false);
        }
      );

      return () => {
        console.log('üì° useWells: Removendo listener');
        unsubscribe();
      };
    } catch (err) {
      console.error('‚ùå useWells: Erro ao configurar listener:', err);
      setError('Erro de configura√ß√£o: ' + err.message);
      setLoading(false);
    }
  }, [sortField, sortDirection]);

  // Adicionar po√ßo
  const addWell = async (wellData) => {
    try {
      console.log('‚ûï useWells: Iniciando cadastro...', wellData);
      
      // Valida√ß√£o detalhada
      if (!wellData.localizacao) {
        throw new Error('Localiza√ß√£o n√£o fornecida');
      }
      if (!wellData.proprietario) {
        throw new Error('Propriet√°rio n√£o fornecido');
      }

      const wellsCollection = collection(db, 'wells');
      console.log('‚ûï useWells: Cole√ß√£o referenciada para escrita');
      
      const wellDocument = {
        localizacao: new GeoPoint(
          parseFloat(wellData.localizacao.latitude),
          parseFloat(wellData.localizacao.longitude)
        ),
        idProprietario: wellData.proprietario.id,
        nomeProprietario: wellData.proprietario.nome,
        observacoes: wellData.observacoes || '',
        dataCadastro: serverTimestamp()
      };

      console.log('‚ûï useWells: Documento preparado:', wellDocument);
      
      console.log('‚ûï useWells: Enviando para Firebase...');
      const docRef = await addDoc(wellsCollection, wellDocument);
      console.log('‚úÖ useWells: Po√ßo cadastrado com sucesso! ID:', docRef.id);
      
      return docRef.id;
    } catch (error) {
      console.error('‚ùå useWells: Erro ao adicionar po√ßo:', error);
      console.error('‚ùå useWells: C√≥digo do erro:', error.code);
      console.error('‚ùå useWells: Mensagem:', error.message);
      throw error;
    }
  };

  // Editar po√ßo
  const editWell = async (wellId, updatedWell) => {
    try {
      const wellDoc = doc(db, 'wells', wellId);
      await updateDoc(wellDoc, updatedWell);
      console.log('useWells: Po√ßo editado:', wellId);
    } catch (error) {
      console.error('useWells: Erro ao editar po√ßo:', error);
      throw error;
    }
  };

  // Deletar po√ßo
  const deleteWell = async (wellId) => {
    try {
      const wellDoc = doc(db, 'wells', wellId);
      await deleteDoc(wellDoc);
      console.log('useWells: Po√ßo deletado:', wellId);
    } catch (error) {
      console.error('useWells: Erro ao deletar po√ßo:', error);
      throw error;
    }
  };

  // Ordena√ß√£o
  const handleSort = (field) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  return {
    wells,
    loading,
    error,
    sortField,
    sortDirection,
    handleSort,
    addWell,
    editWell,
    deleteWell,
  };
};

export default useWells;

export const testarFirebase = async () => {
  try {
    console.log('üî• TESTE: Iniciando teste do Firebase...');
    
    // Teste 1: Listar cole√ß√µes
    const wellsCollection = collection(db, 'wells');
    const snapshot = await getDocs(wellsCollection);
    console.log('‚úÖ TESTE: Conex√£o OK! Po√ßos encontrados:', snapshot.docs.length);
    
    // Teste 2: Adicionar um po√ßo de teste
    const testWell = {
      localizacao: new GeoPoint(-23.5505, -46.6333),
      idProprietario: "teste123",
      nomeProprietario: "Propriet√°rio Teste",
      observacoes: "Po√ßo de teste",
      dataCadastro: serverTimestamp()
    };
    
    const docRef = await addDoc(wellsCollection, testWell);
    console.log('‚úÖ TESTE: Po√ßo de teste adicionado com ID:', docRef.id);
    
    return true;
  } catch (error) {
    console.error('‚ùå TESTE: Erro no Firebase:', error);
    console.error('‚ùå Mensagem detalhada:', error.message);
    return false;
  }
};